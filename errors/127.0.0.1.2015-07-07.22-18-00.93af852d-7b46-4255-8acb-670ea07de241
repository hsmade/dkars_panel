(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: string"
p3
sS'layer'
p4
S'/home/wfournier/private/dkars/web2py-2.10.4/applications/dkars_panel/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.take('db.uri'), pool_size=myconf.take('db.pool_size', cast=int), check_reserved=['all'])\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore+ndb')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take('forms.formstyle')  # or 'bootstrap3_stacked' or 'bootstrap2' or other\nresponse.form_label_separator = myconf.take('forms.separator')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else myconf.take('smtp.server')\nmail.settings.sender = myconf.take('smtp.sender')\nmail.settings.login = myconf.take('smtp.login')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\ndb.define_table('t_mailinglist',\n    Field('f_email', 'string', label=T('e-Mail address'), requires=IS_EMAIL()),\n)\n\ndb.define_table('t_locations',\n    Field('f_location', 'string', label=T('Location')),\n    Field('f_in_NL', 'boolean', label=T('Is in NL')),\n)\n\ndb.define_table('t_home_types',\n    Field('f_home_type', 'string', label=T('Home type'))\n)\n\ndb.define_table('t_preference', 'string', label=T('Preference'))\ndb.define_table('t_members',\n    Field('f_location', 'string', label=T('Location (province, EU or not EU'), \n          requires=IS_IN_DB(db, db.t_locations.id, '%(f_location)s', zero=None)),\n    Field('f_dkars_member', 'boolean', label=T('DKARS member')),\n    Field('f_sex', 'string', label=T('Sex'), requires=IS_IN_SET(('male','female'))),\n    Field('f_age_group', 'string', label=T('Age group'), requires=IS_IN_SET((\n        '< 16',\n        '16-25',\n        '26-50',\n        '51-65',\n        '> 65'\n    ))),\n    Field('f_type_of_home', 'string', label=T('Type of home'),\n          requires=IS_IN_DB(db, db.t_home_types.id, '%(f_home_type)s', zero=None)),\n    Field('f_registration_type', 'string', label=T('Registration type'), requires=IS_IN_SET((\n        'F',\n        'N',\n        'None',\n    ))),\n    Field('f_hours_active', 'string', label=T('Hours active'), requires=IS_IN_SET((\n        '0',\n        '< 1',\n        '1-8',\n        '> 8'\n    ))),\n    # vereniging\n    Field('f_club_member', 'string', label=T('Member of club'), requires=IS_IN_set((\n        'Yes, of one dutch club',\n        'Yes, of two or more dutch clubs',\n        'Yes, of a dutch club and DKARS donator',\n        'No, but DKARS donator',\n        'No, none',\n    ))),\n)\n\ndb.define_table('f_member_preferences',\n    Field('f_member_id', 'integer'),\n    Field('f_preference_id', 'integer'),\n)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/wfournier/private/dkars/web2py-2.10.4/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/wfournier/private/dkars/web2py-2.10.4/applications/dkars_panel/models/db.py", line 107, in <module>\n    db.define_table(\'t_preference\', \'string\', label=T(\'Preference\'))\n  File "/home/wfournier/private/dkars/web2py-2.10.4/gluon/packages/dal/pydal/base.py", line 817, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/wfournier/private/dkars/web2py-2.10.4/gluon/packages/dal/pydal/base.py", line 834, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/wfournier/private/dkars/web2py-2.10.4/gluon/packages/dal/pydal/objects.py", line 322, in __init__\n    \'define_table argument is not a Field or Table: %s\' % field)\nSyntaxError: define_table argument is not a Field or Table: string\n'
p11
s.